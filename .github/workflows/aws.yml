# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      - main

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: gitaction-python ECR 
      id: build-python-ecr
      env:
        ECR_PYTHON_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_PYTHON_REPOSITORY: gitaction-python
      run: |
        docker build -f ./docker/python/prod/Dockerfile -t $ECR_PYTHON_REPOSITORY .
        docker tag $ECR_PYTHON_REPOSITORY:latest $ECR_PYTHON_REGISTRY/$ECR_PYTHON_REPOSITORY:latest
        docker push $ECR_PYTHON_REGISTRY/$ECR_PYTHON_REPOSITORY:latest

    - name: gitactions-nginx ECR 
      id: build-nginx-ecr
      env:
        ECR_NGINX_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_NGINX_REPOSITORY: gitactions-nginx
      run: |
        docker build -f ./docker/nginx/prod/Dockerfile -t $ECR_NGINX_REPOSITORY .
        docker tag $ECR_NGINX_REPOSITORY:latest $ECR_NGINX_REGISTRY/$ECR_NGINX_REPOSITORY:latest
        docker push $ECR_NGINX_REGISTRY/$ECR_NGINX_REPOSITORY:latest

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ./task-definition.json
    #     container-name: my-container

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: django-service
        cluster: django-cluster
        wait-for-service-stability: true
